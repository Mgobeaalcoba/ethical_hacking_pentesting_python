from time import sleep
from dns.resolver import Answer, resolve
from progress.bar import Bar
from os import path
import json
from typing import List, Any

def imprimir_objeto(answer: Answer) -> List[Any]:
    list_q = []
    for q in answer:
        print(type(f"'q' es: {q}"))
        list_q.append(q.to_text())
        print(q)
    print("...")
    return list_q

def main():
    """
    Buscaremos en la URL de referencia si existen los subdominios de referencia y en caso de que lo hagan los agregaremos a una lista de subdominios
    """
    url = "google.com"
    consultas = [
        ("A", url),
        ("NS", url),
        ("MD", url),
        ("MF", url),
        ("CNAME", url),
        ("SOA", url),
        ("MB", url),
        ("MG", url),
        ("MR", url),
        ("NULL", url),
        ("WKS", url),
        ("PTR", url),
        ("HINFO", url),
        ("MINFO", url),
        ("MX", url),
        ("TXT", url),
        ("AXFR", url),
        ("MAILB", url),
        ("MAILA", url),
        ("ANY", url)
    ]

    subdomains_exists = []
    subdomains_valid_names = []
    subdomain_info = dict()

    if path.exists('intro_dnspython/subdominios_existentes.txt'):
        file = open('intro_dnspython/subdominios_existentes.txt', 'r')
        list_file = file.read().split('\n')
        bar = Bar("Espere mientras se ejecuta el Script..", max=len(list_file)*len(consultas))
        file.close()

        for subdomain in list_file:
            for record_type, _ in consultas:
                try:
                    bar.next()
                    print()
                    # domain = f"{subdomain}.{domain}"
                    domain = subdomain
                    respuesta = resolve(domain, record_type)
                    list_respuesta = imprimir_objeto(respuesta)
                    subdomain_info[f"{domain} - {record_type}"] = list_respuesta
                    subdomains_valid_names.append(domain)
                    subdomains_exists.append(subdomain_info)
                except Exception as e:
                    print(f"Ocurri贸 una excepci贸n al resolver {record_type} para {domain}: {type(e).__name__} - {str(e)}")

        # for subdomain in list_file:
        #     for record_type, domain in consultas:
        #         try:
        #             bar.next()
        #             print()
        #             domain = f"{subdomain}.{domain}"
        #             respuesta = resolve(domain, record_type)
        #             imprimir_objeto(respuesta)
        #             subdomain_info[f"{domain} - {record_type}"] = respuesta
        #             subdomains_valid_names.append(domain)
        #             subdomains_exists.append(subdomain_info)
        #         except Exception as e:
        #             print(f"Ocurri贸 una excepci贸n al resolver {record_type} para {domain}: {type(e).__name__} - {str(e)}")

        with open('intro_dnspython/subdominios_existentes.txt', 'w') as file:
            for subdomain in subdomains_valid_names:
                file.write(f"{subdomain}\n")
        with open('intro_dnspython/subdominios_existentes.json', 'w') as json_file:
            json.dump(subdomain_info, json_file, indent=4, ensure_ascii=False)
        
        print(subdomains_exists)
        print(subdomains_valid_names)
    else:
        print("El archivo especificado no existe. Pruebe nuevamente con otro Path")
        exit()

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("Saliendo...")
        exit()
